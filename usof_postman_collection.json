{
    "info": {
        "name": "UsOf API (Local) - Users (re-runnable)",
        "_postman_id": "8f01f404-8c8a-11ef-b6d4-0242ac120002",
        "description": "Users endpoints with auto-generated unique login/email and auto-captured createdUserId so tests can be re-run safely.",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "Users",
            "item": [
                {
                    "name": "Get Users (admin)",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/users",
                            "host": ["{{baseUrl}}"],
                            "path": ["users"]
                        },
                        "auth": {
                            "type": "bearer",
                            "bearer": [
                                {
                                    "key": "token",
                                    "value": "{{token}}",
                                    "type": "string"
                                }
                            ]
                        },
                        "description": "Requires admin role. Put RAW JWT (without 'Bearer') into {{token}}."
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Authorized or forbidden\", function () {",
                                    "  pm.expect([200,403]).to.include(pm.response.code);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "Create User (admin) — unique each run",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"login\": \"u{{rand}}\",\n  \"password\": \"password123\",\n  \"password_confirmation\": \"password123\",\n  \"full_name\": \"User {{rand}}\",\n  \"email\": \"u{{rand}}@example.com\",\n  \"role\": \"user\"\n}",
                            "options": { "raw": { "language": "json" } }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/users",
                            "host": ["{{baseUrl}}"],
                            "path": ["users"]
                        },
                        "auth": {
                            "type": "bearer",
                            "bearer": [
                                {
                                    "key": "token",
                                    "value": "{{token}}",
                                    "type": "string"
                                }
                            ]
                        },
                        "description": "ADMIN ONLY. Generates unique login/email via {{rand}}. Saves created user id to {{createdUserId}}."
                    },
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "// Generate fresh rand each run to avoid conflicts",
                                    "pm.collectionVariables.set('rand', Date.now().toString());"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Created / Forbidden / BadRequest / Conflict\", function () {",
                                    "  pm.expect([201,403,400,409]).to.include(pm.response.code);",
                                    "});",
                                    "if (pm.response.code === 201) {",
                                    "  var j = pm.response.json();",
                                    "  pm.expect(j).to.have.property('id');",
                                    "  pm.collectionVariables.set('createdUserId', j.id.toString());",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "Get User by ID (createdUserId)",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/users/{{createdUserId}}",
                            "host": ["{{baseUrl}}"],
                            "path": ["users", "{{createdUserId}}"]
                        },
                        "auth": {
                            "type": "bearer",
                            "bearer": [
                                {
                                    "key": "token",
                                    "value": "{{token}}",
                                    "type": "string"
                                }
                            ]
                        },
                        "description": "Reads the user created in the previous step ({{createdUserId}})."
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"OK or Not Found\", function () {",
                                    "  pm.expect([200,404]).to.include(pm.response.code);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "Update User by ID (createdUserId)",
                    "request": {
                        "method": "PATCH",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{ \"full_name\": \"User {{rand}} Updated\" }",
                            "options": { "raw": { "language": "json" } }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/users/{{createdUserId}}",
                            "host": ["{{baseUrl}}"],
                            "path": ["users", "{{createdUserId}}"]
                        },
                        "auth": {
                            "type": "bearer",
                            "bearer": [
                                {
                                    "key": "token",
                                    "value": "{{token}}",
                                    "type": "string"
                                }
                            ]
                        },
                        "description": "Updates the user created in this run."
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status is 200 or Forbidden/NotFound\", function () {",
                                    "  pm.expect([200,403,404]).to.include(pm.response.code);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "Upload Avatar (current token user)",
                    "request": {
                        "method": "PATCH",
                        "header": [],
                        "body": {
                            "mode": "formdata",
                            "formdata": [{ "key": "avatar", "type": "file" }]
                        },
                        "url": {
                            "raw": "{{baseUrl}}/users/avatar",
                            "host": ["{{baseUrl}}"],
                            "path": ["users", "avatar"]
                        },
                        "auth": {
                            "type": "bearer",
                            "bearer": [
                                {
                                    "key": "token",
                                    "value": "{{token}}",
                                    "type": "string"
                                }
                            ]
                        },
                        "description": "Uploads avatar for the CURRENT authenticated user (not for createdUserId). Choose a file for key 'avatar'."
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status is 200\", function () { pm.response.to.have.status(200); });",
                                    "pm.test(\"Has profile_picture\", function () {",
                                    "  var j = pm.response.json();",
                                    "  pm.expect(j).to.have.property('profile_picture');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "Delete User (admin) — createdUserId",
                    "request": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/users/{{createdUserId}}",
                            "host": ["{{baseUrl}}"],
                            "path": ["users", "{{createdUserId}}"]
                        },
                        "auth": {
                            "type": "bearer",
                            "bearer": [
                                {
                                    "key": "token",
                                    "value": "{{token}}",
                                    "type": "string"
                                }
                            ]
                        },
                        "description": "Deletes the user created in this run so tests can be re-run safely."
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Deleted / Forbidden / Not Found\", function () {",
                                    "  pm.expect([200,403,404]).to.include(pm.response.code);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Posts",
            "item": [
                {
                    "name": "List Posts (public)",
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{baseUrl}}/posts",
                            "host": ["{{baseUrl}}"],
                            "path": ["posts"]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"200\",()=> pm.response.to.have.status(200));",
                                    "let j=[]; try{j=pm.response.json();}catch(e){}; if(Array.isArray(j)&&j.length){ pm.collectionVariables.set('postId', String(j[0].id)); }"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "List Posts (admin, include_all)",
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{baseUrl}}/posts/admin?sortBy=date",
                            "host": ["{{baseUrl}}"],
                            "path": ["posts", "admin"],
                            "query": [{ "key": "sortBy", "value": "date" }]
                        },
                        "auth": {
                            "type": "bearer",
                            "bearer": [
                                {
                                    "key": "token",
                                    "value": "{{token}}",
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"200/403\",()=> pm.expect([200,403]).to.include(pm.response.code));"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "Get Post by ID (postId)",
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{baseUrl}}/posts/{{postId}}",
                            "host": ["{{baseUrl}}"],
                            "path": ["posts", "{{postId}}"]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"200/404\",()=> pm.expect([200,404]).to.include(pm.response.code));"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "Create Post (auth) — unique title",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"title\": \"Post {{rand}}\",\n  \"content\": [ {\"type\":\"text\",\"text\":\"Hello from {{rand}}\"} ],\n  \"categories\": [1,2]\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/posts",
                            "host": ["{{baseUrl}}"],
                            "path": ["posts"]
                        },
                        "auth": {
                            "type": "bearer",
                            "bearer": [
                                {
                                    "key": "token",
                                    "value": "{{token}}",
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "if(!pm.collectionVariables.get('rand')){pm.collectionVariables.set('rand', Date.now().toString());}"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"201/401/400\",()=> pm.expect([201,401,400]).to.include(pm.response.code));",
                                    "if(pm.response.code===201){ const j=pm.response.json(); pm.collectionVariables.set('postId', String(j.id)); }"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "Patch Post (author/admin)",
                    "request": {
                        "method": "PATCH",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{ \"title\": \"Updated {{rand}}\", \"content\": [ {\"type\":\"text\",\"text\":\"Updated at {{rand}}\"} ] }"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/posts/{{postId}}",
                            "host": ["{{baseUrl}}"],
                            "path": ["posts", "{{postId}}"]
                        },
                        "auth": {
                            "type": "bearer",
                            "bearer": [
                                {
                                    "key": "token",
                                    "value": "{{token}}",
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"200/403/404\",()=> pm.expect([200,403,404]).to.include(pm.response.code));"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "Admin: Change Post Status (+categories)",
                    "request": {
                        "method": "PATCH",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{ \"status\": \"inactive\", \"categories\": [2,4] }"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/posts/{{postId}}",
                            "host": ["{{baseUrl}}"],
                            "path": ["posts", "{{postId}}"]
                        },
                        "auth": {
                            "type": "bearer",
                            "bearer": [
                                {
                                    "key": "token",
                                    "value": "{{token}}",
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"200/403/404\",()=> pm.expect([200,403,404]).to.include(pm.response.code));"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "Like Post (auth) — on activePostId",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{ \"type\": \"like\" }"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/posts/{{activePostId}}/like",
                            "host": ["{{baseUrl}}"],
                            "path": ["posts", "{{activePostId}}", "like"]
                        },
                        "auth": {
                            "type": "bearer",
                            "bearer": [
                                {
                                    "key": "token",
                                    "value": "{{token}}",
                                    "type": "string"
                                }
                            ]
                        },
                        "description": "Лайк по гарантированно активному посту (из публичного списка)."
                    },
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "const pid=pm.collectionVariables.get('activePostId'); if(!pid||isNaN(Number(pid))){ throw new Error('activePostId is empty — run \"List Posts (public)\" first.'); }"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"200/201/400/401\",()=> pm.expect([200,201,400,401]).to.include(pm.response.code));"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "Like Post (auth) — on activePostId",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{ \"type\": \"like\" }"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/posts/{{activePostId}}/like",
                            "host": ["{{baseUrl}}"],
                            "path": ["posts", "{{activePostId}}", "like"]
                        },
                        "auth": {
                            "type": "bearer",
                            "bearer": [
                                {
                                    "key": "token",
                                    "value": "{{token}}",
                                    "type": "string"
                                }
                            ]
                        },
                        "description": "Лайк по гарантированно активному посту."
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"200/201/400/401\",()=> pm.expect([200,201,400,401]).to.include(pm.response.code));",
                                    "pm.test('have activePostId (soft)', ()=> pm.expect(/^[0-9]+$/.test(pm.collectionVariables.get('activePostId')||'')).to.be.true);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "Favorite Post (auth)",
                    "request": {
                        "method": "POST",
                        "url": {
                            "raw": "{{baseUrl}}/posts/{{postId}}/favorite",
                            "host": ["{{baseUrl}}"],
                            "path": ["posts", "{{postId}}", "favorite"]
                        },
                        "auth": {
                            "type": "bearer",
                            "bearer": [
                                {
                                    "key": "token",
                                    "value": "{{token}}",
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"200/201/401\",()=> pm.expect([200,201,401]).to.include(pm.response.code));"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "Unfavorite Post (auth)",
                    "request": {
                        "method": "DELETE",
                        "url": {
                            "raw": "{{baseUrl}}/posts/{{postId}}/favorite",
                            "host": ["{{baseUrl}}"],
                            "path": ["posts", "{{postId}}", "favorite"]
                        },
                        "auth": {
                            "type": "bearer",
                            "bearer": [
                                {
                                    "key": "token",
                                    "value": "{{token}}",
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"200/401\",()=> pm.expect([200,401]).to.include(pm.response.code));"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "Delete Post",
                    "request": {
                        "method": "DELETE",
                        "url": {
                            "raw": "{{baseUrl}}/posts/{{postId}}",
                            "host": ["{{baseUrl}}"],
                            "path": ["posts", "{{postId}}"]
                        },
                        "auth": {
                            "type": "bearer",
                            "bearer": [
                                {
                                    "key": "token",
                                    "value": "{{token}}",
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"200/403/404\",()=> pm.expect([200,403,404]).to.include(pm.response.code));"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                }
            ]
        },

        {
            "name": "Comments",
            "item": [
                {
                    "name": "List Post Comments (public) — activePostId",
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{baseUrl}}/posts/{{activePostId}}/comments",
                            "host": ["{{baseUrl}}"],
                            "path": ["posts", "{{activePostId}}", "comments"]
                        }
                    },
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "const pid=pm.collectionVariables.get('activePostId'); if(!pid||isNaN(Number(pid))){ throw new Error('activePostId is empty — run \"List Posts (public)\" first.'); }"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"200/404\",()=> pm.expect([200,404]).to.include(pm.response.code));"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "List Post Comments (viewer) — includes my inactive (activePostId)",
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{baseUrl}}/posts/{{activePostId}}/comments/me",
                            "host": ["{{baseUrl}}"],
                            "path": [
                                "posts",
                                "{{activePostId}}",
                                "comments",
                                "me"
                            ]
                        },
                        "auth": {
                            "type": "bearer",
                            "bearer": [
                                {
                                    "key": "token",
                                    "value": "{{token}}",
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "const pid=pm.collectionVariables.get('activePostId'); if(!pid||isNaN(Number(pid))){ throw new Error('activePostId is empty — run \"List Posts (public)\" first.'); }"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"200/401\",()=> pm.expect([200,401]).to.include(pm.response.code));"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "Create Comment (auth) — on activePostId",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{ \"content\": \"Comment {{rand}}\" }"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/posts/{{activePostId}}/comments",
                            "host": ["{{baseUrl}}"],
                            "path": ["posts", "{{activePostId}}", "comments"]
                        },
                        "auth": {
                            "type": "bearer",
                            "bearer": [
                                {
                                    "key": "token",
                                    "value": "{{token}}",
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "if(!pm.collectionVariables.get('rand')){pm.collectionVariables.set('rand', Date.now().toString());}",
                                    "const pid=pm.collectionVariables.get('activePostId'); if(!pid||isNaN(Number(pid))){ throw new Error('activePostId is empty — run \"List Posts (public)\" first.'); }"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"201/400/401/403/404\",()=> pm.expect([201,400,401,403,404]).to.include(pm.response.code));",
                                    "if(pm.response.code===201){ const j=pm.response.json(); pm.collectionVariables.set('commentId', String(j.id)); }"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "Get Comment by ID",
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{baseUrl}}/comments/{{commentId}}",
                            "host": ["{{baseUrl}}"],
                            "path": ["comments", "{{commentId}}"]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"200/403/404\",()=> pm.expect([200,403,404]).to.include(pm.response.code));"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "Patch Comment (author/admin)",
                    "request": {
                        "method": "PATCH",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{ \"content\": \"Updated {{rand}}\" }"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/comments/{{commentId}}",
                            "host": ["{{baseUrl}}"],
                            "path": ["comments", "{{commentId}}"]
                        },
                        "auth": {
                            "type": "bearer",
                            "bearer": [
                                {
                                    "key": "token",
                                    "value": "{{token}}",
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"200/403/404\",()=> pm.expect([200,403,404]).to.include(pm.response.code));"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "Like Comment (auth)",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{ \"type\": \"like\" }"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/comments/{{commentId}}/like",
                            "host": ["{{baseUrl}}"],
                            "path": ["comments", "{{commentId}}", "like"]
                        },
                        "auth": {
                            "type": "bearer",
                            "bearer": [
                                {
                                    "key": "token",
                                    "value": "{{token}}",
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"200/201/400/401/403/404\",()=> pm.expect([200,201,400,401,403,404]).to.include(pm.response.code));"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "List Comment Likes",
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{baseUrl}}/comments/{{commentId}}/like",
                            "host": ["{{baseUrl}}"],
                            "path": ["comments", "{{commentId}}", "like"]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"200\",()=> pm.response.to.have.status(200));"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "Delete Comment",
                    "request": {
                        "method": "DELETE",
                        "url": {
                            "raw": "{{baseUrl}}/comments/{{commentId}}",
                            "host": ["{{baseUrl}}"],
                            "path": ["comments", "{{commentId}}"]
                        },
                        "auth": {
                            "type": "bearer",
                            "bearer": [
                                {
                                    "key": "token",
                                    "value": "{{token}}",
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"200/403/404\",()=> pm.expect([200,403,404]).to.include(pm.response.code));"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                }
            ]
        },

        {
            "name": "Categories",
            "item": [
                {
                    "name": "List Categories (public)",
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{baseUrl}}/categories",
                            "host": ["{{baseUrl}}"],
                            "path": ["categories"]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"200\",()=> pm.response.to.have.status(200));",
                                    "const j=pm.response.json(); if(Array.isArray(j)&&j.length){ pm.collectionVariables.set('categoryId', String(j[0].id)); }"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "Create Category (admin)",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{ \"title\": \"Tech {{rand}}\", \"description\": \"Desc {{rand}}\" }"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/categories",
                            "host": ["{{baseUrl}}"],
                            "path": ["categories"]
                        },
                        "auth": {
                            "type": "bearer",
                            "bearer": [
                                {
                                    "key": "token",
                                    "value": "{{token}}",
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"201/403/400\",()=> pm.expect([201,403,400]).to.include(pm.response.code));",
                                    "if(pm.response.code===201){ const j=pm.response.json(); pm.collectionVariables.set('categoryId', String(j.id)); }"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "Get Category by ID",
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{baseUrl}}/categories/{{categoryId}}",
                            "host": ["{{baseUrl}}"],
                            "path": ["categories", "{{categoryId}}"]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"200/404\",()=> pm.expect([200,404]).to.include(pm.response.code));"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "Patch Category (admin)",
                    "request": {
                        "method": "PATCH",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{ \"description\": \"Updated {{rand}}\" }"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/categories/{{categoryId}}",
                            "host": ["{{baseUrl}}"],
                            "path": ["categories", "{{categoryId}}"]
                        },
                        "auth": {
                            "type": "bearer",
                            "bearer": [
                                {
                                    "key": "token",
                                    "value": "{{token}}",
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"200/403/404\",()=> pm.expect([200,403,404]).to.include(pm.response.code));"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "Delete Category (admin)",
                    "request": {
                        "method": "DELETE",
                        "url": {
                            "raw": "{{baseUrl}}/categories/{{categoryId}}",
                            "host": ["{{baseUrl}}"],
                            "path": ["categories", "{{categoryId}}"]
                        },
                        "auth": {
                            "type": "bearer",
                            "bearer": [
                                {
                                    "key": "token",
                                    "value": "{{token}}",
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"200/403/404\",()=> pm.expect([200,403,404]).to.include(pm.response.code));"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "Get Category Posts",
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{baseUrl}}/categories/{{categoryId}}/posts",
                            "host": ["{{baseUrl}}"],
                            "path": ["categories", "{{categoryId}}", "posts"]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"200\",()=> pm.response.to.have.status(200));"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                }
            ]
        }
    ],

    "variable": [
        { "key": "baseUrl", "value": "http://localhost:3000/api" },
        { "key": "token", "value": "" },
        { "key": "rand", "value": "1757685470990" },
        { "key": "createdUserId", "value": "52" },
        { "key": "postId", "value": "1" },
        { "key": "activePostId", "value": "" },
        { "key": "commentId", "value": "" },
        { "key": "categoryId", "value": "" }
    ]
}
