//controllers/PostController.js
import { Posts } from '../models/PostModel.js';
import { Categories } from '../models/CategoryModel.js';
import { Comments } from '../models/CommentModel.js';
import { Likes } from '../models/LikeModel.js';
import { pool } from '../config/db.js';

export const PostController = {
    async list(req, res) {
        const {
            page = 1,
            limit = 10,
            sortBy = 'likes',
            category_id,
            status,
            date_from,
            date_to,
        } = req.query;
        const viewer_id = req.user?.id;
        const offset = (Math.max(1, +page) - 1) * +limit;
        const posts = await Posts.list({
            limit,
            offset,
            sortBy,
            category_id,
            status,
            date_from,
            date_to,
            viewer_id,
        });
        res.json(posts);
    },
    async getById(req, res) {
        const id = +req.params.post_id;
        const post = await Posts.findById(id);
        if (!post) return res.status(404).json({ error: 'Post not found' });
        // hide inactive for others
        if (
            post.status === 'inactive' &&
            (!req.user ||
                (req.user.role !== 'admin' && req.user.id !== post.author_id))
        ) {
            return res.status(403).json({ error: 'Forbidden' });
        }
        res.json(post);
    },
    async create(req, res) {
        const { title, content, categories = [] } = req.body;
        if (!title || !content)
            return res
                .status(400)
                .json({ error: 'title and content required' });
        const post = await Posts.create({
            author_id: req.user.id,
            title,
            content,
            status: 'active',
        });
        // attach categories
        if (Array.isArray(categories) && categories.length) {
            const values = categories
                .map((cid) => `(${post.id}, ${+cid})`)
                .join(',');
            await pool.query(
                `INSERT IGNORE INTO post_categories (post_id, category_id) VALUES ${values}`
            );
        }
        res.status(201).json(post);
    },
    async update(req, res) {
        const id = +req.params.post_id;
        const post = await Posts.findById(id);
        if (!post) return res.status(404).json({ error: 'Post not found' });

        const isAdmin = req.user.role === 'admin';
        const isAuthor = req.user.id === post.author_id;

        if (!isAdmin && !isAuthor) {
            return res.status(403).json({ error: 'Forbidden' });
        }

        const data = {};

        // –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ ‚Äî –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å
        if (isAdmin && 'status' in req.body) {
            data.status = req.body.status; // –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ —Ç—É—Ç –º–æ–∂–Ω–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å: ['active','inactive']
        }

        // –ø—Ä–∞–≤–∞ –∞–≤—Ç–æ—Ä–∞ ‚Äî –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å title/content
        if (isAuthor) {
            if ('title' in req.body) data.title = req.body.title;
            if ('content' in req.body) data.content = req.body.content;
        }

        // –ø—Ä–∏–º–µ–Ω—è–µ–º –∞–ø–¥–µ–π—Ç –ø–æ–ª–µ–π, –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –æ–±–Ω–æ–≤–ª—è—Ç—å
        if (Object.keys(data).length) {
            await Posts.updateById(id, data);
        }

        // –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî –º–æ–∂–Ω–æ –æ–±–æ–∏–º (–∞–¥–º–∏–Ω—É –∏ –∞–≤—Ç–æ—Ä—É)
        if (Array.isArray(req.body.categories)) {
            await pool.query(
                `DELETE FROM post_categories WHERE post_id = :id`,
                { id }
            );
            if (req.body.categories.length) {
                const values = req.body.categories
                    .map((cid) => `(${id}, ${+cid})`)
                    .join(',');
                await pool.query(
                    `INSERT IGNORE INTO post_categories (post_id, category_id) VALUES ${values}`
                );
            }
        }

        return res.json(await Posts.findById(id));
    },
    async remove(req, res) {
        const id = +req.params.post_id;
        const post = await Posts.findById(id);
        if (!post) return res.status(404).json({ error: 'Post not found' });
        if (req.user.role !== 'admin' && req.user.id !== post.author_id) {
            return res.status(403).json({ error: 'Forbidden' });
        }
        await Posts.deleteById(id);
        res.json({ message: 'Post deleted' });
    },
    async listCategories(req, res) {
        const id = +req.params.post_id;
        const rows = await pool.query(
            `SELECT c.* FROM post_categories pc JOIN categories c ON c.id = pc.category_id WHERE pc.post_id = :id`,
            { id }
        );
        res.json(rows[0]);
    },
    async listComments(req, res) {
        const id = +req.params.post_id;
        const include_inactive = req.user?.role === 'admin';
        const comments = await Comments.listByPost({
            post_id: id,
            include_inactive,
        });
        res.json(comments);
    },
    async listCommentsAdmin(req, res) {
        const id = +req.params.post_id;
        // –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –æ—Ç–¥–∞—Ç—å, –ª–∏–±–æ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –ø–æ—Å—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const comments = await Comments.listByPost({
            post_id: id,
            include_inactive: true,
        });
        res.json(comments);
    },

    async likeList(req, res) {
        const id = +req.params.post_id;
        const likes = await Likes.listForPost(id);
        res.json(likes);
    },
    async likeCreate(req, res) {
        const id = +req.params.post_id;
        const { type = 'like' } = req.body;
        if (!['like', 'dislike'].includes(type)) {
            return res.status(400).json({ error: 'type must be like|dislike' });
        }

        // ensure post exists
        const post = await Posts.findById(id);
        if (!post) return res.status(404).json({ error: 'Post not found' });

        if (post.status !== 'active') {
            return res
                .status(403)
                .json({ error: 'Cannot react to inactive post' });
        }
        // —Å–º–æ—Ç—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ–∞–∫—Ü–∏—è –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —ç—Ç–æ—Ç –ø–æ—Å—Ç
        const [rows] = await pool.query(
            `SELECT id, type FROM likes 
     WHERE author_id = :aid AND post_id = :pid AND comment_id IS NULL 
     LIMIT 1`,
            { aid: req.user.id, pid: id }
        );
        const existing = rows[0];

        if (!existing) {
            // –Ω–µ –±—ã–ª–æ ‚Äî –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ä–µ–∞–∫—Ü–∏—é
            await pool.query(
                `INSERT INTO likes (author_id, post_id, type) 
       VALUES (:aid, :pid, :type)`,
                { aid: req.user.id, pid: id, type }
            );
            await updateUserRating(post.author_id);
            return res
                .status(201)
                .json({ message: 'Reaction created', post_id: id, type });
        }

        if (existing.type === type) {
            // —É–∂–µ —Å—Ç–æ–∏—Ç —Ç–∞ –∂–µ —Ä–µ–∞–∫—Ü–∏—è ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            await updateUserRating(post.author_id); // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –º–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å
            return res
                .status(200)
                .json({ message: 'Reaction unchanged', post_id: id, type });
        }

        // —Ä–µ–∞–∫—Ü–∏—è –¥—Ä—É–≥–∞—è ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º
        await pool.query(`UPDATE likes SET type = :type WHERE id = :id`, {
            type,
            id: existing.id,
        });
        await updateUserRating(post.author_id);
        return res
            .status(200)
            .json({ message: 'Reaction switched', post_id: id, type });
    },

    async likeDelete(req, res) {
        const id = +req.params.post_id;
        await Likes.removeForPost({ author_id: req.user.id, post_id: id });
        const post = await Posts.findById(id);
        if (post) await updateUserRating(post.author_id);
        res.json({ message: 'Like removed' });
    },
    async uploadImage(req, res) {
        const id = +req.params.post_id;
        const post = await Posts.findById(id);
        if (!post) return res.status(404).json({ error: 'Post not found' });

        // —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –ø–æ—Å—Ç–∞ –∏–ª–∏ –∞–¥–º–∏–Ω
        const isAuthor = req.user.id === post.author_id;
        const isAdmin = req.user.role === 'admin';
        if (!isAuthor && !isAdmin)
            return res.status(403).json({ error: 'Forbidden' });

        if (!req.file)
            return res.status(400).json({ error: 'No file uploaded' });

        const url = `/${req.file.path}`.replace(/\\/g, '/'); // Windows-safe
        // –Ω–∏—á–µ–≥–æ –≤ –ë–î —Å–µ–π—á–∞—Å –Ω–µ —Ç—Ä–æ–≥–∞–µ–º ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–¥–∞–µ–º URL,
        // —Ñ—Ä–æ–Ω—Ç —Å–∞–º –≤—Å—Ç–∞–≤–∏—Ç –±–ª–æ–∫ { type: 'image', url } –≤ content –∏ —Å–¥–µ–ª–∞–µ—Ç PATCH /posts/:id
        return res.json({ url });
    },
    async listAllAdmin(req, res) {
        const {
            page = 1,
            limit = 10,
            sortBy = 'likes',
            category_id,
            status,
            date_from,
            date_to,
            include_all = true,
        } = req.query;
        const offset = (Math.max(1, +page) - 1) * +limit;
        const posts = await Posts.list({
            limit,
            offset,
            sortBy,
            category_id,
            status, // –º–æ–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ —Å—Ç–∞—Ç—É—Å—É (?status=inactive)
            date_from,
            date_to,
            include_all: true, // üî¥ –í–ê–ñ–ù–û: –¥–æ–±–∞–≤—å —ç—Ç–æ
        });
        res.json(posts);
    },

    async getByIdAdmin(req, res) {
        const id = +req.params.post_id;
        const post = await Posts.findById(id);
        if (!post) return res.status(404).json({ error: 'Post not found' });
        // –∞–¥–º–∏–Ω –≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏—Ç
        res.json(post);
    },
    async listCommentsForViewer(req, res) {
        const post_id = +req.params.post_id;
        const viewer_id = req.user.id;

        const comments = await Comments.listByPostForViewer({
            post_id,
            viewer_id,
        });
        res.json(comments);
    },
};

async function updateUserRating(user_id) {
    const [postSum] = await pool.query(
        `SELECT COALESCE(SUM(CASE 
        WHEN l.type='like' THEN 1 
        WHEN l.type='dislike' THEN -1 
        ELSE 0 END), 0) AS s
     FROM posts p
     INNER JOIN likes l ON l.post_id = p.id
     WHERE p.author_id = :user_id`,
        { user_id }
    );

    const [commentSum] = await pool.query(
        `SELECT COALESCE(SUM(CASE 
        WHEN l.type='like' THEN 1 
        WHEN l.type='dislike' THEN -1 
        ELSE 0 END), 0) AS s
     FROM comments c
     INNER JOIN likes l ON l.comment_id = c.id
     WHERE c.author_id = :user_id`,
        { user_id }
    );

    const rating = Number(postSum[0]?.s ?? 0) + Number(commentSum[0]?.s ?? 0);
    await pool.query(`UPDATE users SET rating = :rating WHERE id = :user_id`, {
        rating,
        user_id,
    });
}
